@use '../styles/variables.scss' as *;
/// Mixin to manage responsive breakpoints
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin border-radius($pixel) {
  border-radius: $pixel;
}

/// Animate css properties
/// @example @include animate(color);
/// or @include animate(color width);
/// or @include animate(color width, 1s, linear);
/// or @include animate(color width, 1s, ease-in, 0.5s); - defining delay ALL params should be passed!

$animation-speed: 0.3s !default;

@mixin animate(
  $properties,
  $duration: $animation-speed,
  $easing: ease-in-out,
  $delay: false
) {
  @if ($properties and $duration and $easing and $delay) {
    $list: ();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing} #{$delay};
      $list: append($list, $str, comma);
    }
    transition: $list;
  } @else {
    $list: ();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing};
      $list: append($list, $str, comma);
    }
    transition: $list;
  }
}

/// Preventing Overflow with Ellipsis
/// @example @include ellipsis;

@mixin ellipsis($line: 1) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
    word-break: break-all;
  }
}

/// Creates a visual triangle
/// values—foreground-color background-color.
/// @link http://bourbon.io/docs/#triangle
/// @param $size - argument can take one or two values—width height
/// @param $color - argument can take one or two
/// @param $direction - value: up, down, left, right, up-right, up-left, down-right, down-left
/// @example @include triangle(12px, gray, down);
/// @include triangle(12px 6px, gray blue, up-left);

@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or
    ($direction == down) or
    ($direction == right) or
    ($direction == left)
  {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color
      $background-color
      $background-color
      $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color
      $foreground-color
      $background-color
      $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}
